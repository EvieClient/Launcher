{
  "name": "@xmcl/core",
  "version": "2.9.0",
  "main": "./dist/index.js",
  "description": "Minecraft version parsing and game launching.",
  "engines": {
    "node": ">=10.0"
  },
  "publishConfig": {
    "access": "public",
    "main": "./dist/index.js",
    "module": "./dist/index.esm.js"
  },
  "dependencies": {
    "@xmcl/unzip": "^2.0.0",
    "uuid": "^8.3.2",
    "yauzl": "^2.10.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Voxelum/minecraft-launcher-core-node.git"
  },
  "author": "cijhn@hotmail.com",
  "keywords": [
    "minecraft",
    "typescript",
    "minecraft-launcher",
    "nodejs",
    "electron"
  ],
  "sideEffects": false,
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Voxelum/minecraft-launcher-core-node/issues"
  },
  "homepage": "https://github.com/Voxelum/minecraft-launcher-core-node#readme",
  "devDependencies": {
    "@types/yauzl": "^2.9.2"
  },
  "module": "./dist/index.esm.js",
  "readme": "# Launcher Core Module\n\n[![npm version](https://img.shields.io/npm/v/@xmcl/core.svg)](https://www.npmjs.com/package/@xmcl/core)\n[![Downloads](https://img.shields.io/npm/dm/@xmcl/core.svg)](https://npmjs.com/@xmcl/core)\n[![Install size](https://packagephobia.now.sh/badge?p=@xmcl/core)](https://packagephobia.now.sh/result?p=@xmcl/core)\n[![npm](https://img.shields.io/npm/l/@xmcl/minecraft-launcher-core.svg)](https://github.com/voxelum/minecraft-launcher-core-node/blob/master/LICENSE)\n[![Build Status](https://github.com/voxelum/minecraft-launcher-core-node/workflows/Build/badge.svg)](https://github.com/Voxelum/minecraft-launcher-core-node/actions?query=workflow%3ABuild)\n\nProvide the core function to parse Minecraft version and launch.\n\n## Usage\n\n### Parse Version JSON \n\nParse minecraft version as a resolved version, which is used for launching process. You can also read version info from it if you want.\n\n```ts\n    import { Version } from \"@xmcl/core\";\n    const minecraftLocation: string;\n    const minecraftVersionId: string;\n\n    const resolvedVersion: ResolvedVersion = await Version.parse(minecraftLocation, minecraftVersionId);\n```\n\n### Diagnose\n\nGet the report of the version. It can check if version missing assets/libraries.\n\n```ts\n    import { MinecraftLocation, diagnose, ResolvedVersion } from \"@xmcl/core\";\n    \n    const minecraft: MinecraftLocation;\n    const version: string; // version string like 1.13\n    const resolvedVersion: ResolvedVersion = await Version.parse(minecraft, version);\n\n    const report: MinecraftIssueReport = await diagnose(resolvedVersion.id, resolvedVersion.minecraftDirectory);\n\n    const issues: MinecraftIssues[] = report.issues;\n\n    for (let issue of issues) {\n        switch (issue.role) {\n            case \"minecraftJar\": // your jar has problem\n            case \"versionJson\": // your json has problem\n            case \"library\": // your lib might be missing or corrupted\n            case \"assets\": // some assets are missing or corrupted\n            // and so on\n        }\n    }\n```\n\n\n### Launch Game\n\nLaunch minecraft from a version:\n\n```ts\n    import { launch } from \"@xmcl/core\"\n    const version: string; // full version id, like 1.13, or your forge version like, 1.13-forge-<someForgeVersion>\n    const javaPath: string; // java executable path\n    const gamePath: string; // .minecraft path\n    const proc: Promise<ChildProcess> = launch({ gamePath, javaPath, version });\n```\n\nDetach from the parent process. So your launcher's exit/crash won't affact the Minecraft running.\n\n```ts\n    const proc: Promise<ChildProcess> = Launcher.launch({ gamePath, javaPath, version, extraExecOption: { detached: true } });\n```\n"
}
